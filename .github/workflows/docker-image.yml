name: Remo Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
jobs:
    
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
   
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}      
    
    - name: Build and push Docker image
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
    - name: Setup cache
      uses: actions/cache@v3
      with:
          path: cache
          key: ${{ runner.os }}-cache-${{ hashFiles('**/sysdig-cli-scanner', '**/latest_version.txt', '**/db/main.db.meta.json', '**/scanner-cache/inlineScannerCache.db') }}
          restore-keys: ${{ runner.os }}-cache-

    - name: Download sysdig-cli-scanner if needed
      run:  |
          #curl -sLO https://download.sysdig.com/scanning/sysdig-cli-scanner/latest_version.txt
          mkdir -p ${GITHUB_WORKSPACE}/cache/db/
          curl -sL -o /tmp  "https://www.dropbox.com/scl/fi/4jerb19w3iffpso5pl0i3/sysdig-cli-scanner?rlkey=dpp96y7kyc8nwnq4t84kk4l98&dl=0"
          #if [ ! -f ${GITHUB_WORKSPACE}/cache/latest_version.txt ] || [ $(cat ./latest_version.txt) != $(cat ${GITHUB_WORKSPACE}/cache/latest_version.txt) ]; then
            #cp ./latest_version.txt ${GITHUB_WORKSPACE}/cache/latest_version.txt
           # curl -sL -o ${GITHUB_WORKSPACE}/cache/sysdig-cli-scanner "https://download.sysdig.com/scanning/bin/sysdig-cli-scanner/$(cat ${GITHUB_WORKSPACE}/cache/latest_version.txt)/linux/amd64/sysdig-cli-scanner"
            chmod +x /tmp/sysdig-cli-scanner
          else
            echo "sysdig-cli-scanner latest version already downloaded"
          fi

    - name: Scan the image using sysdig-cli-scanner
      env:
          SECURE_API_TOKEN: ${{ secrets.SECURE_API_TOKEN }}
      run: |
          /tmp/sysdig-cli-scanner \
            --apiurl ${SYSDIG_SECURE_ENDPOINT} \
            --console-log \
            --json-scan-result report.json \
              k8s-yellow-orange

    - name: Scan the image using sysdig-cli-scanner
      env:
        SECURE_API_TOKEN: ${{ secrets.SECURE_API_TOKEN }}
      run: |
        /tmp/sysdig-cli-scanner \
          --apiurl ${SYSDIG_SECURE_ENDPOINT} \
          docker://ghcr.io/${{github.repository_owner}}/${IMAGE_NAME}:${IMAGE_TAG} \
          --console-log \
          --dbpath=${GITHUB_WORKSPACE}/cache/db/ \
          --cachepath=${GITHUB_WORKSPACE}/cache/scanner-cache/

    - name: Generate SARIF report
      run: |
          python3 /path/to/sysdig-to-sarif.py report.json > results.sarif

    - name: Upload scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
          sarif_file: results.sarif
          
    #- name: Build the Docker image
    #  run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)
    #- uses: actions/checkout@v2 # Checking out the repo

    #- name: Build and push Docker image
    # uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
    #  with:
    #    context: .
    #   file: ./Dockerfile
    #   platforms: ${{ matrix.platforms }}
    #   push: true
    #   outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=My multi-arch image
    
